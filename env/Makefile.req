#
# Requirements checking
# (Most people use ./configure, but I felt that in practice
#  you don't need a complicated requirements checker. A simple one should
#  suffice.)

#
# BASE REQUIREMENTS
#
BOOST_REQ := 108400
BOOST_REQ_STR := 1_84

#
# My error function
#

define err
    $(info ERROR $(1))
    $(info Requirements:
           1. sed command
           2. g++ with C++14 support
           3. Boost version $(BOOST_REQ_STR) or later
           4. libsecp256k1-zkp (git clone https://github.com/datavetaren/secp256k1-zkp)
	      Install this parallel to epilog, so that
	      git/epilog/src
	      git/sec256k1-zkp/ )
    $(error requirements check failed)
endef

#
# Check existance of SED
#
CHECK_SED := $(shell command 2>&1 echo "foo" | sed 's/foo/bar/g' 2>&1 ; echo "exit is $$?")

ifeq "$(findstring bar exit is 0, $(CHECK_SED))" ""
      $(call err, Could not run sed. Please check environment.)
endif


#
# Check existance of GCC (G++)
#

CHECK_GCC := $(shell command 2>&1 g++ >/dev/null --version ; echo "exit is $$?")

ifneq "$(findstring not found, $(CHECK_GCC))" ""
    $(call err, Could not run g++. Please install g++.)
endif

ifeq "$(findstring exit is 0, $(CHECK_GCC))" ""
    $(call err, Error while running g++ --version. Check installation.)
endif

#
# Check g++ support for c++14
#

CHECK_C14 := $(shell echo "int main(int argc, char *argv[]) { auto x = 0; return x; }" >/tmp/check_c14.cpp; g++ -std=c++14 2>&1 /tmp/check_c11.cpp -o /tmp/c14_check.out)

ifneq "$(CHECK_C11)" ""
   $(call err, Error while checking support for C++14 for g++. Please check installation.)
endif

#
# Check for pthread
#
#
# CHECK_PTHREAD := $(shell echo "\#include <pthread.h>\nint main(int argc, char *argv[]) { (void)pthread_self(); return 0; }" >/tmp/check_pthread.cpp; g++ -std=c++14 -lpthread 2>&1 /tmp/check_pthread.cpp -o /tmp/check_phtread.out)
#
# ifneq "$(CHECK_PTHREAD)" ""
#    $(call err, Error while checking pthread. Please check if pthread.h is ava# ilable and link against it.)
# endif

#
# Check for BOOST
#

CHECK_BOOST := $(shell echo "\#include <boost/version.hpp>\nint main(int argc, char *argv[]) { return 0; }" >/tmp/check_boost.cpp; g++ -I $(BOOST_INCLUDE) -std=c++14 2>&1 /tmp/check_boost.cpp -o /tmp/check_boost.out)

ifneq "$(CHECK_BOOST)" ""
   $(shell cat /tmp/check_boost.cpp)
   $(call err, Couldn't find BOOST. Please download and install BOOST v$(BOOST_REQ_STR) or later.)
endif

CHECK_BOOST_VERSION := $(shell echo "\#include <stdio.h>\n\#include <boost/version.hpp>\nint main(int argc, char *argv[]) { printf(\"version %s\", BOOST_LIB_VERSION); return !(BOOST_VERSION >= $(BOOST_REQ)); }" >/tmp/check_boost_ver.cpp; g++ -I $(BOOST_INCLUDE) -std=c++14 2>&1 /tmp/check_boost_ver.cpp -o /tmp/check_boost_ver.out; /tmp/check_boost_ver.out; echo exit is $$?)

ifeq "$(findstring exit is 0, $(CHECK_BOOST_VERSION))" ""
   FOUND_VER := $(shell echo $(CHECK_BOOST_VERSION) | sed -n 's/.*version \([[:digit:]]*_[[:digit:]]*\).*/\1/p')
   $(call err, BOOST version $(FOUND_VER) was found but version $(BOOST_REQ_STR) is required)
endif

#
# Check for libsecp256k1-zkp
#

CHECK_SECP256K1 := $(shell echo "\#include \"../../src/secp256k1/secp256k1.hpp\"\nint main(int argc, char *argv[]) { return 0; }" >/tmp/check_secp256k1.cpp; rm -f /tmp/check_secp256k1.out; g++ -I . -I ../../../secp256k1-zkp -I ../../../secp256k1-zkp/src -std=c++14 /tmp/check_secp256k1.cpp -o /tmp/check_secp256k1.out 2>&1; /tmp/check_secp256k1.out; echo exit is $$?)

ifeq "$(findstring exit is 0, $(CHECK_SECP256K1))" ""
   $(call err, Couldn't find secp256k1-zkp. Issue git clone https://github.com/datavetaren/secp256k1-zkp parallel to epilog.)
endif
